// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"

interface Pokemon {
  id: number
  name: string
}

interface PokemonApiResponse {
  pokemon: Pokemon
}

// Define a service using a base URL and expected endpoints
export const pokemonApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "https://pokeapi.co/api/v2/" }),
  reducerPath: "pokemonApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Pokemon", "PokemonSpecies"],
  endpoints: build => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getPokemon: build.query<PokemonApiResponse, string>({
      query: (pokemonName) => ({url: `pokemon/${pokemonName}`}),
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Pokemon", id }],
    }),
    getPokemonSpecies: build.query<PokemonApiResponse, string>({
      query: (pokemonName) => ({url: `pokemon-species/${pokemonName}`}),
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "PokemonSpecies", id }],
    }),
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `pokemonApiSlice.endpoints.getPokemon.useQuery`
export const { useGetPokemonQuery } = pokemonApiSlice
